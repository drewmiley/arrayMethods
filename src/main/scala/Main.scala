import scala.concurrent.ExecutionContext

object Main extends App {
  implicit val ec = ExecutionContext.global

  println("Hello")

//  val exampleList: List[IVO] = ExampleLists.noOptions
//  val exampleList: List[IVO] = ExampleLists.optionProperties
//  val exampleList: List[Option[IVO]] = ExampleLists.optionObject
//  val exampleList: List[Option[IVO]] = ExampleLists.optionObjectAndProperties

//  val blah = exampleList.++()
//  val blah = exampleList.+:()
//  val blahj = exampleList.::()
//  val blaj = exampleList.:::()
//  val blajh = exampleList.collect()
//  val blah = exampleList.companion
//  val lavh = exampleList.drop()
//  val dsfs = exampleList.dropWhile()
//  val dfsd = exampleList.flatMap()
//  val dsfsdf = exampleList.foldRight()
//  val fsdf = exampleList.fold()
//  val dsfds = exampleList.map()
//  val dfsdf = exampleList.mapConserve()
//  val sdfdsf = exampleList.head
//  val dfgsdf = exampleList.isEmpty
//  val dfdsf = exampleList.reverse
//  val fdsf = exampleList.reverse_:::()
//  val dsfdsfg = exampleList.foreach()
//  val fgfdgd = exampleList.slice()
//  val sdfdsf = exampleList.span()
//  val sdfsdf = exampleList.splitAt()
//  val sddsf = exampleList.stringPrefix
//  val sdfds = exampleList.tail
//  val dsfdsf = exampleList.take()
//  val dsfds = exampleList.takeRight()
//  val sdfsd = exampleList.takeWhile()
//  val sdfsd = exampleList.++:()
//  val sdfsd = exampleList./:()
//  val dsds = exampleList.:+()
//  val dsfs = exampleList.:\()
//  val dsfs = exampleList.aggregate()
//  val dsfsd = exampleList.andThen()
//  val dsfdsf = exampleList.apply()
//  val sdfdsf = exampleList.applyOrElse()
//  val dsfdsf = exampleList.collectFirst()
//  val sfdsfs = exampleList.combinations()
//  val dsfds = exampleList.compose()
//  val dsdfsd = exampleList.contains()
//  val sdfsdf = exampleList.corresponds()
//  val sdfsd = exampleList.count()
//  val sdfsd = exampleList.diff()
//  val fgsdfgd = exampleList.dropRight()
//  val ddsf = exampleList.exists()
//  val dfdsf = exampleList.filter()
//  val sdfsd = exampleList.filterNot()
//  val sdfds = exampleList.find()
//  val dfsd = exampleList.flatten
//  val dfsd = exampleList.forall()
//  val dfds = exampleList.groupBy()
//  val dfds = exampleList.grouped()
//  val edsdsf = exampleList.indexOf()
//  val sdfdsf = exampleList.indexWhere()
//  val sdfds = exampleList.init
//  val sdfsd = exampleList.lastIndexOf()
//  val dsfs = exampleList.lastIndexWhere()
//  val edfgd = exampleList.max
//  val edfgd = exampleList.maxBy
//  val edfgd = exampleList.min
//  val edfgd = exampleList.minBy()
//  val dfsdf = exampleList.orElse()
//  val edfgd = exampleList.padTo()
//  val edfgd = exampleList.partition()
//  val dfsf = exampleList.patch()
//  val edfgd = exampleList.prefixLength()
//  val edfgd = exampleList.reduce()
//  val edfgd = exampleList.reduceLeft()
//  val edfgd = exampleList.reduceLeftOption()
//  val edfgd = exampleList.reduceOption()
//  val edfgd = exampleList.reverseMap()
//  val edfgd = exampleList.runWith()
//  val edfgd = exampleList.scan()
//  val edfgd = exampleList.scanLeft()
//  val edfgd = exampleList.segmentLength()
//  val edfgd = exampleList.sliding()
//  val edfgd = exampleList.sortBy()
//  val edfgd = exampleList.sorted
//  val edfgd = exampleList.sortWith()
//  val edfgd = exampleList.startsWith()
//  val edfgd = exampleList.sum
//  val edfgd = exampleList.union()
//  val edfgd = exampleList.unzip
//  val edfgd = exampleList.zip()
//  val edfgd = exampleList.zipAll()
//  val edfgd = exampleList.zipWithIndex
//  val edfgd = exampleList.->()
}
